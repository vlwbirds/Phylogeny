---
title: "Scratch Phylogeny"
format: html
editor: visual
---

## Libraries and Data

Figuring out how to create a parsimonious phylogeny with [BirdTree](https://birdtree.org/) (Jetz et al., 2021)

```{r}
library(ape)
library(castor)
library(here)
library(phytools)
library(tidyverse)

# data sets
# nex_data is 100 trees
nex_data <- read.nexus(here("data/trees/MayrAllErickson-tree-pruner-205594f1-a408-4345-b027-64dfdee069f9/output.nex"))

# Elton Traits
elton <- read_csv(here("data/EltonTraits.csv"))
view(elton)

# Peru Hawk Experiment Data
hwk <- read_csv(here("data/2023_MadreDeDios_hwk.csv"))
view(hwk)

spp_alarm <- read.csv(here("data/spp_alarm.csv"))
view(spp_alarm)
```

## Creating a consensus tree

```{r}
consensus_tree <- consensus(nex_data, p = 0.5)
plot(consensus_tree, cex = 0.8)
```

## Ordering the tree

```{r}
tip_labels <- consensus_tree$tip.label
tip_labels

# Getting rid of duplicate Scientific Names in the Elton Traits
elton_unique <- unique(elton[, "Scientific", drop = FALSE])

merged_data <- merge(data.frame(species = tip_labels), elton_unique, by.x = "species", by.y = "Scientific", all.x = TRUE)

merged_data

ordered_vector <- order(as.vector(merged_data$SpecID))
ordered_tips <- merged_data[order(merged_data$SpecID), "species"]

ordered_tree <- consensus_tree[ordered_tips]

plot(ordered_tree, cex = 0.8)
```

```{r}
# Ensure alarm names match tree tip labels
if (!all(names(alarm) %in% pruned_tree$tip.label)) {
  stop("Mismatch between alarm names and tip labels in pruned_tree.")
}

# Reorder alarm to match tree tip labels
alarm <- spp_alarm$alarm
alarm <- alarm[match(pruned_tree$tip.label, names(alarm))]

# Check for missing values in alarm
if (any(is.na(alarm))) {
  stop("Alarm data contains NA values.")
}

# Ensure alarm data has the correct length
if (length(alarm) != length(pruned_tree$tip.label)) {
  stop("Length of alarm data does not match number of tips in pruned_tree.")
}

```

## Alarm Call Phylogeny

Worked up until recent run. This is from my commit history.

```{r}
# add underscores
spp_alarm$BirdTree <- gsub(" ", "_", spp_alarm$BirdTree)

# simplifying the object name
tip <- spp_alarm$BirdTree

# Check unmatched tip labels
unmatched_tips <- setdiff(consensus_tree$tip.label, tip)

# Print unmatched tip labels
print(unmatched_tips)

# dropping unmatched species
pruned_tree <- keep.tip(consensus_tree, tip)
t2 <- consensus.edges(pruned_tree,if.absent = "ignore")

# data that will appear on tree
alarm <- spp_alarm$Alarm
names(alarm) <- spp_alarm$BirdTree

#debugging
print(length(alarm))
print(head(alarm))
str(pruned_tree)
plot(pruned_tree)

# adding edge length ???
branch_lengths <- pruned_tree$edge
edge <- pruned_tree$edge
pruned_tree <- compute.brlen(pruned_tree, method = "uniform")
node_depths <- node.depth(pruned_tree, method = 1)
pruned_tree$node.label <- node_depths

# plotting the tree
obj <- contMap(pruned_tree, alarm, plot=FALSE, res=200)
plot( setMap(obj, invert = TRUE), fsize = c(0.7,1), leg.txt = "Alarm Calling", lwd = 3)

```

```{r}
sum(is.na(spp_alarm$alarm))
sum(is.na(spp_alarm$BirdTree))

length(spp_alarm$alarm)
length(spp_alarm$BirdTree)

```

```{r}
library(ape)
library(phytools)

# Replace spaces with underscores
spp_alarm$BirdTree <- gsub(" ", "_", spp_alarm$BirdTree)

# Simplify object names
tip <- spp_alarm$BirdTree

# Check unmatched tip labels
unmatched_tips <- setdiff(consensus_tree$tip.label, tip)
print(unmatched_tips)

# Drop unmatched species
pruned_tree <- keep.tip(consensus_tree, tip)

# Check if alarm and BirdTree are not NULL and have the same length
if (!is.null(spp_alarm$alarm) && !is.null(spp_alarm$BirdTree) && length(spp_alarm$alarm) == length(spp_alarm$BirdTree)) {
  alarm <- spp_alarm$alarm
  names(alarm) <- spp_alarm$BirdTree
} else {
  stop("Mismatch or NULL values in spp_alarm$alarm or spp_alarm$BirdTree.")
}

# Ensure the alarm data is numeric and check its length
alarm <- as.numeric(alarm)
if (any(is.na(alarm))) {
  stop("Alarm data contains NA values.")
}

if (length(alarm) != length(pruned_tree$tip.label)) {
  stop("Length of alarm data does not match number of tips in pruned_tree.")
}

# Ensure pruned_tree has correct node labels
if (length(pruned_tree$node.label) < pruned_tree$Nnode) {
  pruned_tree$node.label <- paste0("Node_", seq_len(pruned_tree$Nnode))
}

# Recompute branch lengths if necessary
if (is.null(pruned_tree$edge.length) || length(pruned_tree$edge.length) == 0) {
  pruned_tree <- compute.brlen(pruned_tree, method = "uniform")
}

# Verify edge matrix
if (nrow(pruned_tree$edge) == 0) {
  stop("Edge matrix in pruned_tree is empty or incorrectly defined.")
}

# Check for missing values in node labels
if (any(is.na(pruned_tree$node.label))) {
  stop("Tree contains missing node labels.")
}

# Define a valid color scale
color_scale <- colorRampPalette(c("blue", "green", "yellow", "red"))(100)

# Plotting the tree with continuous mapping
obj <- contMap(pruned_tree, alarm, plot = FALSE, res = 200, colors = color_scale)
plot(setMap(obj, invert = TRUE), fsize = c(0.7, 1), leg.txt = "Alarm Calling", lwd = 3)

```

```{r}
library(ape)
library(phytools)

# Replace spaces with underscores
spp_alarm$BirdTree <- gsub(" ", "_", spp_alarm$BirdTree)

# Simplify object names
tip <- spp_alarm$BirdTree

# Check unmatched tip labels
unmatched_tips <- setdiff(consensus_tree$tip.label, tip)
print(unmatched_tips)

# Drop unmatched species
pruned_tree <- keep.tip(consensus_tree, tip)

# Debugging information
print(length(spp_alarm$alarm))
print(head(spp_alarm$alarm))
str(pruned_tree)
plot(pruned_tree)

# Compute branch lengths if needed
branch_lengths <- pruned_tree$edge.length
pruned_tree <- compute.brlen(pruned_tree, method = "uniform")
node_depths <- node.depth(pruned_tree, method = 1)
pruned_tree$node.label <- node_depths

# Data that will appear on the tree
alarm <- spp_alarm$alarm
names(alarm) <- spp_alarm$BirdTree
alarm <- as.numeric(alarm)

# Plotting the tree with continuous mapping
obj <- contMap(pruned_tree, alarm, plot=FALSE, res=200)
plot(setMap(obj, invert = TRUE), fsize = c(0.7,1), leg.txt = "Alarm Calling", lwd = 3)

```

```{r}
# add underscores
spp_alarm$BirdTree <- gsub(" ", "_", spp_alarm$BirdTree)

# simplifying the object name
tip <- spp_alarm$BirdTree

# Check unmatched tip labels
unmatched_tips <- setdiff(consensus_tree$tip.label, tip)

# Print unmatched tip labels
print(unmatched_tips)

pruned_tree <- keep.tip(consensus_tree, tip)
t2<-consensus.edges(pruned_tree)

#debugging
print(length(alarm))
print(head(alarm))
str(pruned_tree)
plot(pruned_tree)
#branch_lengths <- pruned_tree$edge
#edge <- pruned_tree$edge
#pruned_tree <- compute.brlen(pruned_tree, method = "uniform")
#node_depths <- node.depth(pruned_tree, method = 1)
#pruned_tree$node.label <- node_depths

# data that will appear on tree
alarm <- spp_alarm$Alarm
names(alarm) <- spp_alarm$BirdTree

tree <- pruned_tree

# plot tree
obj<-contMap(tree, alarm, plot=FALSE, res=200)

plot( setMap(obj, invert = TRUE), fsize = c(0.7,1), leg.txt = "Alarm Calling", lwd = 3)


```

```{r}
library(ape)
library(phytools)

# Replace spaces with underscores
spp_alarm$BirdTree <- gsub(" ", "_", spp_alarm$BirdTree)

# Simplify object names
tip <- spp_alarm$BirdTree

# Check unmatched tip labels
unmatched_tips <- setdiff(consensus_tree$tip.label, tip)
print(unmatched_tips)

# Drop unmatched species
pruned_tree <- keep.tip(consensus_tree, tip)

# Check if alarm and BirdTree are not NULL and have the same length
if (!is.null(spp_alarm$alarm) && !is.null(spp_alarm$BirdTree) && length(spp_alarm$alarm) == length(spp_alarm$BirdTree)) {
  alarm <- spp_alarm$alarm
  names(alarm) <- spp_alarm$BirdTree
} else {
  stop("Mismatch or NULL values in spp_alarm$alarm or spp_alarm$BirdTree.")
}

# Ensure the alarm data is numeric and check its length
alarm <- as.numeric(alarm)
if (length(alarm) != length(pruned_tree$tip.label)) {
  stop("Length of alarm data does not match number of tips in pruned_tree.")
}

# Ensure pruned_tree has correct node labels
if (length(pruned_tree$node.label) < pruned_tree$Nnode) {
  pruned_tree$node.label <- paste0("Node_", seq_len(pruned_tree$Nnode))
}

# Plotting the tree with continuous mapping
obj <- contMap(pruned_tree, alarm, plot = FALSE, res = 200)
plot(setMap(obj, invert = TRUE), fsize = c(0.7, 1), leg.txt = "Alarm Calling", lwd = 3)

```

```{r}
# Verify branch lengths
branch_lengths <- pruned_tree$edge.length
print(branch_lengths)

# If branch_lengths are missing, you need to compute or assign them
if (is.null(branch_lengths) || length(branch_lengths) == 0) {
  pruned_tree <- compute.brlen(pruned_tree, method = "uniform")
  branch_lengths <- pruned_tree$edge.length
}

```

```{r}
library(ape)
library(phytools)

# Replace spaces with underscores
spp_alarm$BirdTree <- gsub(" ", "_", spp_alarm$BirdTree)

# Simplify object names
tip <- spp_alarm$BirdTree

# Check unmatched tip labels
unmatched_tips <- setdiff(consensus_tree$tip.label, tip)
print(unmatched_tips)

# Drop unmatched species
pruned_tree <- keep.tip(consensus_tree, tip)

# Check if alarm and BirdTree are not NULL and have the same length
if (!is.null(spp_alarm$alarm) && !is.null(spp_alarm$BirdTree) && length(spp_alarm$alarm) == length(spp_alarm$BirdTree)) {
  alarm <- spp_alarm$alarm
  names(alarm) <- spp_alarm$BirdTree
} else {
  stop("Mismatch or NULL values in spp_alarm$alarm or spp_alarm$BirdTree.")
}

# Ensure the alarm data is numeric and check its length
alarm <- as.numeric(alarm)
if (any(is.na(alarm))) {
  stop("Alarm data contains NA values.")
}

if (length(alarm) != length(pruned_tree$tip.label)) {
  stop("Length of alarm data does not match number of tips in pruned_tree.")
}

# Ensure pruned_tree has correct node labels
if (length(pruned_tree$node.label) < pruned_tree$Nnode) {
  pruned_tree$node.label <- paste0("Node_", seq_len(pruned_tree$Nnode))
}

# Recompute branch lengths if necessary
if (is.null(pruned_tree$edge.length) || length(pruned_tree$edge.length) == 0) {
  pruned_tree <- compute.brlen(pruned_tree, method = "uniform")
}

# Verify edge matrix
if (nrow(pruned_tree$edge) == 0) {
  stop("Edge matrix in pruned_tree is empty or incorrectly defined.")
}

# Check for missing values in node labels
if (any(is.na(pruned_tree$node.label))) {
  stop("Tree contains missing node labels.")
}

# Plotting the tree with continuous mapping
obj <- contMap(pruned_tree, alarm, plot = FALSE, res = 200)
plot(setMap(obj, invert = TRUE), fsize = c(0.7, 1), leg.txt = "Alarm Calling", lwd = 3)


```

```{}
```

## Alarm Call Phylogeny - Rooted

```{r}
library(phytools)

# Replace spaces with underscores in species names
spp_alarm$BirdTree <- gsub(" ", "_", spp_alarm$BirdTree)

# Prune the tree to include only species present in the alarm data
pruned_tree <- keep.tip(consensus_tree, spp_alarm$BirdTree)

# Reorder alarm data to match pruned_tree$tip.label
alarm <- spp_alarm$alarm[match(pruned_tree$tip.label, spp_alarm$BirdTree)]

# Handle NA values
filtered_indices <- !is.na(alarm)
alarm <- alarm[filtered_indices]
pruned_tree <- drop.tip(pruned_tree, pruned_tree$tip.label[!filtered_indices])

# Ensure alignment between alarm vector and tree tips
names(alarm) <- pruned_tree$tip.label

# Root the tree using an outgroup
rooted_tree <- root(pruned_tree, outgroup = "Penelope_jacquacu", resolve.root = TRUE)

if (is.null(rooted_tree$edge.length)) {
    rooted_tree$edge.length <- rep(1, nrow(rooted_tree$edge))
}

# Ensure the tree is ultrametric
if (!is.ultrametric(rooted_tree)) {
  rooted_tree <- chronos(rooted_tree)
}

# Assign uniform branch lengths
rooted_tree <- compute.brlen(rooted_tree, method = "uniform")

# Run contMap with error checking
tryCatch({
  obj <- contMap(rooted_tree, alarm, plot = FALSE, res = 200)
  plot(setMap(obj, invert = TRUE), fsize = c(0.7, 1), leg.txt = "Alarm Calling", lwd = 3)
}, error = function(e) {
  print("Error in contMap:")
  print(e)
  print("Checking input data...")
  print(alarm)
  print(rooted_tree$tip.label)
})
```

```{r}
# Check if the names of alarm match the tree tips
names(alarm) <- rooted_tree$tip.label

```

```{r}
# Check the structure of pruned_tree
str(pruned_tree)

# Ensure there are no missing node labels
print(any(is.na(pruned_tree$node.label)))

```

```{r}
get_all_node_depths(pruned_tree, as_edge_count=FALSE)
str(pruned_tree)
```

## Fan Tree

```{r}
plotTree(consensus_tree, type = "fan", ftype = "i")
```

## Tree Matrix

```{r}
nex <- as.matrix(alarm)[,1]
nex
```

## Estimate Ancestral State

```{r}

fit <- fastAnc(tree, alarm, vars = TRUE, CI = TRUE)
fit
```

```{r}
str(fit)
class(fit)
ans_df <- as_data_frame(fit)
```

```{r}
fit$CI[1,]
```

```{r}
range(alarm)
```

## Projection of the Reconstruction onto the Edges of the Tree

This is identical to the first one. Probably need to join character estimates

```{r}
obj2 <- contMap(tree, alarm, plot = FALSE)
plot( setMap(obj, invert = TRUE), legend = 0.7*max(nodeHeights(pruned_tree)),
     fsize = c(0.7, 0.9))
```

## Discrete Characters

```{r}
data(nex_data)

x <- getStates(pruned_tree, "tips")
tree <- pruned_tree
rm(pruned_tree)

```

```{r}
phenogram(pruned_tree, alarm, ftype = "off", spread.labels = FALSE)
```

```{r}
phylomorphospace3d(tree, alarm, method = "static")
```

## Hide Tree

```{r}
spp_hide <- read_csv(here("data/2023_MadreDeDios_hwk.csv"))
view(spp_hide)

# add underscores
spp_hide$BirdTree <- gsub(" ", "_", spp_hide$BirdTree)

# simplifying the object name
tip <- spp_hide$BirdTree

# Check unmatched tip labels
unmatched_tips <- setdiff(consensus_tree$tip.label, tip)

# Print unmatched tip labels
print(unmatched_tips)

matching_tips <- tip %in% consensus_tree$tip.label

consensus_tree_matched <- keep.tip.phylo(consensus_tree, tip[matching_tips])

pruned_tree <- keep.tip(consensus_tree_matched, tip)
t2<-consensus.edges(pruned_tree)

# data that will appear on tree
alarm <- spp_alarm$Alarm
names(alarm) <- spp_alarm$BirdTree

tree <- pruned_tree

# plot tree
obj<-contMap(tree, alarm, plot=FALSE, res=200)

plot( setMap(obj, invert = TRUE), fsize = c(0.7,1), leg.txt = "Alarm Calling", lwd = 3)
```
